#!/usr/local/bin/python

"""Override ESPHome CLI tool located in /usr/local/bin/esphome.

Feature 1: Overload the 'external_components' to specify the only source as local 'components' workspace folder
Feature 2: use the platformio idedata computed while compiling to feed the '.vscode/c_cpp_properties.json' to use C++ intellisense
"""

import json
import os
import sys
from typing import Any

from esphome import platformio_api, yaml_util
import esphome.__main__ as main_esphome
from esphome.core import CORE, TimePeriod
from esphome.git import run_git_command


def get_wsk_folder(folder_name: str):
    work_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    return os.path.join(work_dir, folder_name)


#########################
## Override yaml load
#########################
def load_yaml_override(fname: str, clear_secrets: bool = True) -> Any:
    conf = prev_load_override(fname, clear_secrets)
    comp_folder = get_wsk_folder("components")
    wsk = get_wsk_folder(".")
    gs = run_git_command(["git", "config", "--get", "remote.origin.url"], wsk)[:-4]
    main_esphome._LOGGER.info(gs)
    for comp in conf["external_components"]:
        src = comp["source"]
        if (isinstance(src, str) and src == f"github://{gs[19:]}") or (
            isinstance(src, dict) and src["type"] == "git" and src["url"] == gs
        ):
            comp["source"] = {"path": comp_folder, "type": "local"}
            comp["refresh"] = TimePeriod(seconds=1)
            main_esphome._LOGGER.info(
                f"Override Feature 1: external component '{gs}' patched to local '{comp_folder}'"
            )
    return conf


prev_load_override = yaml_util.load_yaml
yaml_util.load_yaml = load_yaml_override


#############################################
## Override compile action
#############################################
def compile_program_override(args, conf):
    main_esphome._LOGGER.info("Compiling app...")
    rc = platformio_api.run_compile(conf, CORE.verbose)
    if rc != 0:
        return rc
    idedata = platformio_api.get_idedata(conf)
    if idedata is not None:
        vscode_folder = get_wsk_folder(".vscode")
        os.makedirs(vscode_folder, exist_ok=True)
        with open(
            os.path.join(vscode_folder, "c_cpp_properties.json"), "w"
        ) as output_json:
            json.dump(convert_pio_to_vscode(idedata.raw), output_json, indent=4)
        main_esphome._LOGGER.info(
            f"Override Feature 2: vscode C++ Configuration '{idedata.raw['env_name']}' refreshed."
        )
        return 0
    return 1


main_esphome.compile_program = compile_program_override


def get_std_flag(flags: list[str]):
    std_flag = [flag[5:] for flag in flags if flag.startswith("-std=")]
    return std_flag[0] if std_flag else ""


def convert_pio_to_vscode(input_data):
    all_include = [
        *input_data["includes"]["build"],
        *input_data["includes"]["compatlib"],
        *input_data["includes"]["toolchain"],
    ]
    return {
        "configurations": [
            {
                "name": input_data["env_name"],
                "includePath": all_include,
                "browse": {
                    "limitSymbolsToIncludedHeaders": True,
                    "path": all_include,
                },
                "defines": input_data["defines"],
                # "cStandard": get_std_flag(input_data["cc_flags"]),
                # "cppStandard": get_std_flag(input_data["cxx_flags"]),
                "compilerPath": input_data["cc_path"],
                "compilerArgs": input_data["cc_flags"],
            }
        ],
        "version": 4,
    }


########################
##  MAIN
########################
if __name__ == "__main__":
    sys.exit(main_esphome.main())
